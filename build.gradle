buildscript {
    project.ext.KOTLIN_VERSION = '1.3.50'
    project.ext.IS_IN_TRAVIS = 'true' == System.getenv('TRAVIS')
    project.ext.TEST_BUILD_TYPE = project.properties.get('testBuildType', 'debug')

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
        classpath 'com.android.tools.lint:lint-gradle:26.5.1'
    }
}

plugins {
    id 'com.github.triplet.play' version '2.4.2'
    id 'com.quittle.setup-android-sdk' version '1.3.1'
    id 'com.quittle.android-emulator' version '0.0.2'
    id 'com.quittle.svg-2-android-vector' version '0.0.3'
    id 'com.vanniktech.code.quality.tools' version '0.19.0'
    id 'com.diffplug.gradle.image-grinder' version '2.0.2'
}

import com.diffplug.gradle.imagegrinder.Size
import com.github.triplet.gradle.play.internal.PluginsKt

final File customResDir = new File(buildDir, 'custom-generated/res')
final File customResDirFg = new File(buildDir, 'custom-generated/res-fg')
final File customResDirBg = new File(buildDir, 'custom-generated/res-bg')

repositories {
    google()
    jcenter()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    final String androidSigningPassword = System.getenv('ANDROID_SIGNING_PASSWORD')
    signingConfigs {
        if (androidSigningPassword) {
            release {
                storeFile file('config/a11y-ally-release.jks')
                storePassword androidSigningPassword
                keyPassword androidSigningPassword
                keyAlias 'a11y-ally-release-11/11/18'
            }
        }
    }

    buildTypes {
        screenshot {
            initWith debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), file('config/proguard-rules.pro')

            if (androidSigningPassword) {
                signingConfig signingConfigs.release
            } else {
                signingConfig debug.signingConfig
            }
        }
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28

        buildConfigField('@androidx.annotation.NonNull String', 'TAG', '"A11yAlly"')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
        disable 'GradleDependency', 'AllowBackup', 'GoogleAppIndexingWarning', 'VectorRaster', 'IconLauncherShape'
        // Temporary while SVG 2 Android Vector plugin does not hide the SVGs from the linter
        disable 'UnusedResources'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    testBuildType TEST_BUILD_TYPE

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.res.srcDirs += [customResDir, customResDirFg, customResDirBg]
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$KOTLIN_VERSION"
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.fragment:fragment:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.cardview:cardview:1.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.3'

    androidTestImplementation 'tools.fastlane:screengrab:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

if (IS_IN_TRAVIS) {
    play {
        serviceAccountCredentials = file('config/a11y-ally-app-publisher@api-7302096083209403391-613431.iam.gserviceaccount.com.json')
        defaultToAppBundles = true
        track = 'alpha'
        resolutionStrategy = 'auto'
        outputProcessor {
            versionNameOverride = "$versionNameOverride.$versionCode"
        }
    }
} else {
    play {
        // Doesn't need to be valid, just have a valid file extension
        serviceAccountCredentials = file('config/dummy_service_account.json')
    }
}

codeQualityTools {
    htmlReports true
    xmlReports false

    detekt {
        config = 'config/detekt-config.yml'
    }

    ktlint {
        // Any higher and it complains about indentation that cannot be suppressed
        toolVersion = '0.15.0'
    }
}

imageGrinder {
    // Unable to add a non-src directory for the GPP plugin so we have to copy the generated icon
    // into the expected directory after generating the resources, but before publishing them.
    // https://github.com/Triple-T/gradle-play-publisher/issues/521
    afterEvaluate {
        generatePlayIconHack {
            final releaseVariant = android.applicationVariants.find { it.name == 'release' }
            final String releasePlayPath = PluginsKt.getPlayPath(releaseVariant)
            srcDir = file('src/main/custom-res')
            dstDir = file("build/${releasePlayPath}/res/listings/en-US/graphics/icon")

            grinder { img ->
                img.renderFull('icon.png', Size.createSquare(512))
            }

            tasks['publishReleaseListing'].dependsOn it
            mustRunAfter('generateReleasePlayResources')
        }
    }

    generateIconImages {
        srcDir = file('src/main/custom-res')
        dstDir = customResDir
        grinder { img ->
            img.renderFull("mipmap-xxxhdpi/ic_launcher.png", Size.createSquare(192))
            img.renderFull("mipmap-xxhdpi/ic_launcher.png", Size.createSquare(144))
            img.renderFull("mipmap-xhdpi/ic_launcher.png", Size.createSquare(96))
            img.renderFull("mipmap-hdpi/ic_launcher.png", Size.createSquare(72))
            img.renderFull("mipmap-mdpi/ic_launcher.png", Size.createSquare(48))
        }
        tasks['preBuild'].dependsOn it
    }

    generateForegroundIconImages {
        srcDir = file('src/main/custom-res-fg')
        dstDir = customResDirFg
        grinder { img ->
            img.renderFull("mipmap-xxxhdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(432))
            img.renderFull("mipmap-xxhdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(324))
            img.renderFull("mipmap-xhdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(216))
            img.renderFull("mipmap-hdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(162))
            img.renderFull("mipmap-mdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(108))
        }
        tasks['preBuild'].dependsOn it
    }

    generateBackgroundIconImages {
        srcDir = file('src/main/custom-res-bg')
        dstDir = customResDirBg
        grinder { img ->
            img.renderFull("mipmap-xxxhdpi/ic_launcher_adaptive_background.png", Size.createSquare(432))
            img.renderFull("mipmap-xxhdpi/ic_launcher_adaptive_background.png", Size.createSquare(324))
            img.renderFull("mipmap-xhdpi/ic_launcher_adaptive_background.png", Size.createSquare(216))
            img.renderFull("mipmap-hdpi/ic_launcher_adaptive_background.png", Size.createSquare(162))
            img.renderFull("mipmap-mdpi/ic_launcher_adaptive_background.png", Size.createSquare(108))
        }
        tasks['preBuild'].dependsOn it
    }
}

task copyAdditionalPlayStoreResources(type: Copy) {
    from new File(customResDir, 'play')
    into new File(project.buildDir, 'generated/gpp/release/res')

    dependsOn 'generateIconImages'

    tasks['preBuild'].dependsOn it
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all' << '-Werror'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        allWarningsAsErrors = true
        freeCompilerArgs = ['-Xuse-experimental=kotlin.Experimental']
    }
}

if (IS_IN_TRAVIS) {
    defaultTasks 'test', 'check', 'assemble', 'bundle'
} else {
    defaultTasks 'assembleDebug', 'check', 'test', 'connectedCheck', 'assemble', 'bundle'
}
