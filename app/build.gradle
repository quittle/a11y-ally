buildscript {
    project.ext.TEST_BUILD_TYPE = project.properties.get('testBuildType', 'debug')

    dependencies {
        classpath 'com.google.gms:google-services:4.3.14'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.2'
    }
}

plugins {
    id 'com.github.triplet.play' version '3.3.0'
    id 'com.quittle.android-emulator' version '0.4.3'
    id 'com.quittle.svg-2-android-vector' version '0.0.6'
    id 'com.diffplug.image-grinder' version '2.2.2'
}

import com.diffplug.gradle.imagegrinder.Size
import com.github.triplet.gradle.androidpublisher.ResolutionStrategy
import org.gradle.util.VersionNumber

final File customResDir = new File(buildDir, 'custom-generated/res')
final File customResDirFg = new File(buildDir, 'custom-generated/res-fg')
final File customResDirBg = new File(buildDir, 'custom-generated/res-bg')

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30

    signingConfigs {
        if (IS_CI_RELEASE) {
            final String androidSigningPassword = System.getenv('ANDROID_SIGNING_PASSWORD')
            release {
                storeFile rootProject.file('config/a11y-ally-release.jks')
                storePassword androidSigningPassword
                keyPassword androidSigningPassword
                keyAlias 'a11y-ally-release-11/11/18'
            }
        }
    }

    buildTypes {
        screenshot {
            initWith debug
        }

        debug {
            // Ensures that debug app traffic isn't reported to Google Analytics as prod traffic.
            applicationIdSuffix '.debug'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), file('config/proguard-rules.pro')
            testProguardFiles file('config/test-proguard-rules.pro')

            if (IS_CI_RELEASE) {
                signingConfig signingConfigs.release
            } else {
                signingConfig debug.signingConfig
            }
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30

        buildConfigField('@androidx.annotation.NonNull String', 'TAG', '"A11yAlly"')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // Require to ensure consistency across debug and release builds
        testApplicationId 'com.quittle.a11yally.test'
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
        disable 'GradleDependency', 'AllowBackup', 'GoogleAppIndexingWarning', 'VectorRaster', 'IconLauncherShape', 'VectorPath'
        // Temporary while SVG 2 Android Vector plugin does not hide the SVGs from the linter
        disable 'UnusedResources'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        animationsDisabled true
    }

    testBuildType TEST_BUILD_TYPE

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.res.srcDirs += [customResDir, customResDirFg, customResDirBg]
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.res.srcDirs += 'src/androidTest/res'
    }

    onVariantProperties {
        for (output in outputs) {
            // Must be stored outside the provider to prevent an infinite loop
            final String origVersionName = output.versionName.get()

            // versionCode will be updated by Triple-T after the configuration stage. The version
            // name can't be set at that time because versionName will be frozen. This gets around
            // that by setting versionName (a Gradle Property) to be dynamic and thus generated at
            // compile time
            final Provider<String> processedVersionCode = output.versionCode.map { versionCode ->
                "$origVersionName.$versionCode"
            }

            output.versionName.set(processedVersionCode)
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

dependencies {
    lintChecks project(path: ':lint')

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$KOTLIN_VERSION"

    implementation "org.jetbrains.kotlin:kotlin-reflect:$KOTLIN_VERSION"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3-native-mt'
    implementation 'androidx.lifecycle:lifecycle-service:2.6.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.annotation:annotation:1.5.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.appcompat:appcompat-resources:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation platform('com.google.firebase:firebase-bom:31.1.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$JUNIT_VERSION"
    testImplementation "org.junit.vintage:junit-vintage-engine:$JUNIT_VERSION"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.mockito:mockito-core:4.11.0'

    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$JUNIT_VERSION"
    androidTestImplementation "org.junit.vintage:junit-vintage-engine:$JUNIT_VERSION"
    androidTestImplementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.14.1'
    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.skyscreamer:jsonassert:1.5.1'
}

play {
    if (IS_CI_RELEASE) {
        serviceAccountCredentials = rootProject.file('config/a11y-ally-app-publisher@api-7302096083209403391-613431.iam.gserviceaccount.com.json')

        resolutionStrategy = ResolutionStrategy.AUTO
    } else {
        // Doesn't need to be valid, just have a valid file extension
        serviceAccountCredentials = file('config/dummy_service_account.json')
    }
    defaultToAppBundles = true
    track = 'alpha'
}

setupAndroidSdk {
    packages 'cmdline-tools;latest'
}

androidEmulator {
    emulator {
        includeGoogleApis true
        device 'Nexus 4'
    }
}

imageGrinder {
    // Unable to add a non-src directory for the GPP plugin so we have to copy the generated icon
    // into the expected directory after generating the resources, but before publishing them.
    // https://github.com/Triple-T/gradle-play-publisher/issues/521
    afterEvaluate {
        generatePlayIconHack {
            final File playDir = project.tasks['generateReleasePlayResources'].resDir.getAsFile().get()
            srcDir = file('src/main/custom-res')
            dstDir = new File(playDir, 'res/listings/en-US/graphics/icon')

            grinder { img ->
                img.renderFull('icon.png', Size.createSquare(512))
            }

            tasks['publishReleaseListing'].dependsOn it
            mustRunAfter('generateReleasePlayResources')
        }
    }

    generateIconImages {
        srcDir = file('src/main/custom-res')
        dstDir = customResDir
        grinder { img ->
            img.renderFull("mipmap-xxxhdpi/ic_launcher.png", Size.createSquare(192))
            img.renderFull("mipmap-xxhdpi/ic_launcher.png", Size.createSquare(144))
            img.renderFull("mipmap-xhdpi/ic_launcher.png", Size.createSquare(96))
            img.renderFull("mipmap-hdpi/ic_launcher.png", Size.createSquare(72))
            img.renderFull("mipmap-mdpi/ic_launcher.png", Size.createSquare(48))
        }
        tasks['preBuild'].dependsOn it
    }

    generateForegroundIconImages {
        srcDir = file('src/main/custom-res-fg')
        dstDir = customResDirFg
        grinder { img ->
            img.renderFull("mipmap-xxxhdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(432))
            img.renderFull("mipmap-xxhdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(324))
            img.renderFull("mipmap-xhdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(216))
            img.renderFull("mipmap-hdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(162))
            img.renderFull("mipmap-mdpi/ic_launcher_adaptive_foreground.png", Size.createSquare(108))
        }
        tasks['preBuild'].dependsOn it
    }

    generateBackgroundIconImages {
        srcDir = file('src/main/custom-res-bg')
        dstDir = customResDirBg
        grinder { img ->
            img.renderFull("mipmap-xxxhdpi/ic_launcher_adaptive_background.png", Size.createSquare(432))
            img.renderFull("mipmap-xxhdpi/ic_launcher_adaptive_background.png", Size.createSquare(324))
            img.renderFull("mipmap-xhdpi/ic_launcher_adaptive_background.png", Size.createSquare(216))
            img.renderFull("mipmap-hdpi/ic_launcher_adaptive_background.png", Size.createSquare(162))
            img.renderFull("mipmap-mdpi/ic_launcher_adaptive_background.png", Size.createSquare(108))
        }
        tasks['preBuild'].dependsOn it
    }
}

task copyAdditionalPlayStoreResources(type: Copy) {
    from new File(customResDir, 'play')
    into new File(project.buildDir, 'generated/gpp/release/res')

    dependsOn 'generateIconImages'

    tasks['preBuild'].dependsOn it
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all' << '-Werror'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        allWarningsAsErrors = true
        freeCompilerArgs += [
                '-opt-in=kotlin.Experimental',
                '-opt-in=kotlin.RequiresOptIn'
        ]
    }
}

if (IS_IN_CI) {
    defaultTasks 'test', 'check', 'assemble', 'bundle'
} else {
    defaultTasks 'assembleDebug', 'check', 'test', 'connectedCheck', 'assemble', 'bundle'
}
